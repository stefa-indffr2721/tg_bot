package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;

public class TelegramBot extends TelegramLongPollingBot {

    private final QuestionRepository questionRepository;

    private final Map<Long, GameState> userGameStates;

    public TelegramBot() {
        this.questionRepository = new QuestionRepository();
        this.userGameStates = new HashMap<>();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            if (messageText.equals("/play")) {
                showCategorySelection(chatId);
            } else if (userGameStates.containsKey(chatId)) {
                GameState gameState = userGameStates.get(chatId);

                if (gameState.waitingForCategory) {
                    processCategorySelection(chatId, messageText);
                } else if (messageText.equals("1") || messageText.equals("2") || messageText.equals("3")) {
                    //–ø–æ —Ö–æ—Ä–æ—à–µ–º—É –Ω–∞–¥–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–± —Ä–∞–±–æ—Ç–∞–ª–æ —Å –ª—é–±—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–≤–µ—Ç–æ–≤
                    processAnswer(chatId, Integer.parseInt(messageText));
                } else {
                    sendMessage(chatId, "–î–ª—è –æ—Ç–≤–µ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3");
                }
            } else {
                switch (messageText) {
                    case "/start":
                        sendStartMessage(chatId);
                        break;
                    case "/help":
                        sendHelpMessage(chatId);
                        break;
                    default:
                        sendUnknownCommandMessage(chatId);
                        break;
                }
            }
        }
    }

    private void showCategorySelection(long chatId) {
        List<String> categories = questionRepository.getAvailableCategories();
        StringBuilder message = new StringBuilder("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n");

        for (int i = 0; i < categories.size(); i++) {
            message.append(i + 1).append(". ").append(categories.get(i)).append("\n");
        }

        message.append("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1-5):");

        GameState gameState = new GameState();
        gameState.waitingForCategory = true;
        userGameStates.put(chatId, gameState);

        sendMessage(chatId, message.toString());
    }

    private void processCategorySelection(long chatId, String categoryInput) {
        if (categoryInput.equals("1") || categoryInput.equals("2") || categoryInput.equals("3") ||
                categoryInput.equals("4") || categoryInput.equals("5")) {
            //–ø–æ —Ö–æ—Ä–æ—à–µ–º—É –Ω–∞–¥–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–± —Ä–∞–±–æ—Ç–∞–ª–æ —Å –ª—é–±—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π

            int categoryIndex = Integer.parseInt(categoryInput) - 1;
            List<String> categories = questionRepository.getAvailableCategories();
            String selectedCategory = categories.get(categoryIndex);
            GameState gameState = userGameStates.get(chatId);

            gameState.waitingForCategory = false;
            gameState.selectedCategory = selectedCategory;
            gameState.questions = questionRepository.getQuestionsByCategory(selectedCategory);

            sendMessage(chatId, "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: " + selectedCategory + "\n–ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!");
            sendNextQuestion(chatId);

        } else {
            sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5");
        }
    }

    private void startGame(long chatId) {
        sendNextQuestion(chatId);
    }

    private void sendNextQuestion(long chatId) {
        GameState gameState = userGameStates.get(chatId);

        if (gameState.currentQuestionIndex < gameState.questions.size()) {
            QuizQuestion currentQuestion = gameState.questions.get(gameState.currentQuestionIndex);

            String questionText = "üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + gameState.selectedCategory + "\n" +
                    "–í–æ–ø—Ä–æ—Å " + (gameState.currentQuestionIndex + 1) + "/5:\n" +
                    currentQuestion.getQuestion() + "\n\n" +
                    "1. " + currentQuestion.getOptions().get(0) + "\n" +
                    "2. " + currentQuestion.getOptions().get(1) + "\n" +
                    "3. " + currentQuestion.getOptions().get(2) + "\n\n" +
                    "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç (1, 2 –∏–ª–∏ 3):";

            sendMessage(chatId, questionText);
        } else {
            finishGame(chatId);
        }
    }

    private void processAnswer(long chatId, int userAnswer) {
        GameState gameState = userGameStates.get(chatId);
        QuizQuestion currentQuestion = gameState.questions.get(gameState.currentQuestionIndex);

        boolean isCorrect = (userAnswer - 1) == currentQuestion.getCorrectAnswerIndex();

        if (isCorrect) {
            gameState.correctAnswers++;
            sendMessage(chatId, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!");
        } else {
            String correctAnswer = currentQuestion.getOptions().get(currentQuestion.getCorrectAnswerIndex());
            sendMessage(chatId, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " + correctAnswer);
        }

        gameState.currentQuestionIndex++;

        if (gameState.currentQuestionIndex < gameState.questions.size()) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            sendNextQuestion(chatId);
        } else {
            finishGame(chatId);
        }
    }

    private void finishGame(long chatId) {
        GameState gameState = userGameStates.get(chatId);
        String result = "üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n" +
                "–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " + gameState.correctAnswers + "/5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!\n\n" +
                "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?\n" +
                "/play\n" +
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è —É–º–µ—é.";

        sendMessage(chatId, result);
        userGameStates.remove(chatId);
    }

    private void sendStartMessage(long chatId) {
        String response = """
                üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QuizBot!
                
                –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω.
                
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!
                
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è —É–º–µ—é.""";

        sendMessage(chatId, response);
    }

    private void sendHelpMessage(long chatId) {
        String response = """
                üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:
                
                /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
                /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
                /play - –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É (5 –≤–æ–ø—Ä–æ—Å–æ–≤)
                
                –í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –≤—ã–±–∏—Ä–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã 1, 2 –∏–ª–∏ 3.""";

        sendMessage(chatId, response);
    }

    private void sendUnknownCommandMessage(long chatId) {
        String response = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.";

        sendMessage(chatId, response);
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("[ERR]: " + e.getMessage());
        }
    }

    @Override
    public String getBotUsername() {
        return Token.BOT_USERNAME;
    }

    @Override
    public String getBotToken() {
        return Token.BOT_TOKEN;
    }

    private static class GameState {
        int currentQuestionIndex = 0;
        int correctAnswers = 0;
        boolean waitingForCategory = true;
        String selectedCategory;
        List<QuizQuestion> questions;
    }
}